/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package basicioexample;

/*
 * Algorithms and Complexity                                Agosto 3, 2022
 * IST 4310
 * Daniel David Gutierrez Cantillo
 *
 *
 * Sinopsis:
 * Generar n numeros aleatorios y escribirlos en un archivo vacio, 
 * guardar los numeros en un array que contiene todos los numeros 
 * para luego determinar el numero de veces que cada numero se repite
 *
 *
 * Copyright (c) 2022 Misael Diaz-Maldonado
 * This file is released under the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 *
 * References:
 * [0] Files: www.w3schools.com/java/java_files_create.asp
 * [1] PrintWriter: (docs.oracle.com/en/java/javase/11/docs/api/java.base/
 *                   java/io/PrintWriter.html)
 * [2] IOException: (docs.oracle.com/javase/7/docs/api/java/io/
 *                   IOException.html)
 * [3] FileNotFoundException: (docs.oracle.com/javase/7/docs/api/java/io/
 *                             FileNotFoundException.html)
 * [4] Scanner: docs.oracle.com/javase/7/docs/api/java/util/Scanner.html
 * [5] www.javatpoint.com/throw-keyword
 *
 */

import java.io.File;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;

class BasicIOExample {

    static long[][] tiempos = new long[400][2];
    static long[][] tiempos2 = new long[400][2];
    static long[][] tiempos3 = new long[400][2];
    static long sum = 0;

    public static void main(String[] args) {
        create("Best");
        int power = 4;
        //ciclo para hacer n repeticiones, en este caso 17 repeticiones
        for (int repeticiones = 0; repeticiones < 17; repeticiones++) {
            create("data");       // creates a file
            int m = (int) Math.pow(2, power);
            write(m, 1);	// writes data to the file                       // reads data in the file
            store(m, repeticiones, tiempos);	// stores data in an array
            power = power + 1;
        }
        try {
            PrintWriter out = new PrintWriter("Best.txt");
            //Recorrer array con tiempos de ejecucion
            int p = 4;
            for (int i = 0; i < tiempos.length; ++i) {
                //Escribir cada tiempo de ejecucion en el archivo
                int m = (int) Math.pow(2, p);
                out.println(m + " " + tiempos[i][1] + " " + tiempos[i][0]);
                p = p + 1;
            }
            out.close();	// closes the output stream
        } catch (FileNotFoundException err) {
            // complains if file does not exist
            err.printStackTrace();
        }

        create("Average");
        //ciclo para hacer n repeticiones, en este caso 500 repeticiones
        for (int repeticiones = 0; repeticiones < 500; repeticiones++) {
            create("data");       // creates a file
            write(3 * (repeticiones + 9), 2);
            store(3 * (repeticiones + 9), repeticiones, tiempos2);	// stores data in an array
        }
        try {
            PrintWriter out = new PrintWriter("Average.txt");
            //Recorrer array con tiempos de ejecucion
            for (int i = 0; i < tiempos2.length; ++i) {
                //Escribir cada tiempo de ejecucion en el archivo
                out.println(3 * (i + 9) + " " + tiempos2[i][1] + " " + tiempos2[i][0]);
            }
            out.close();	// closes the output stream
        } catch (FileNotFoundException err) {
            // complains if file does not exist
            err.printStackTrace();
        }

        create("Worst");
        //ciclo para hacer n repeticiones, en este caso 100 repeticiones
        for (int repeticiones = 0; repeticiones < 100; repeticiones++) {
            create("data");       // creates a file
            write(3 * (repeticiones + 9), 3);
            store(3 * (repeticiones + 9), repeticiones, tiempos3);	// stores data in an array
        }
        try {
            PrintWriter out = new PrintWriter("Worst.txt");
            //Recorrer array con tiempos de ejecucion
            for (int i = 0; i < tiempos3.length; ++i) {
                //Escribir cada tiempo de ejecucion en el archivo
                out.println(3 * (i + 9) + " " + tiempos3[i][1] + " " + tiempos3[i][0]);
            }
            out.close();	// closes the output stream
        } catch (FileNotFoundException err) {
            // complains if file does not exist
            err.printStackTrace();
        }
    }

    // implementations:
    private static void create(String r) // creates a file
    {
        try {
            // defines the filename
            String fname = (r + ".txt");
            // creates a new File object
            File f = new File(fname);

            // creates the new file
            f.createNewFile();

        } catch (IOException err) {
            // complains if there is an Input/Output Error
            err.printStackTrace();
        }
        return;
    }

    private static void write(int n, int c) // writes data to a file
    {
        try {
            // defines the filename
            String filename = ("data.txt");
            // creates new PrintWriter object for writing file
            PrintWriter out = new PrintWriter(filename);
            if (c == 1) {
                for (int i = 0; i < n; i++) {
                    out.printf("%d\n", n);
                }
            } else {
                if (c == 2) {
                    //generar n numeros aleatorios
                    for (int i = 0; i != n; ++i) {
                        //generador de numeros aleatorios
                        Random randomGenerator = new Random();
                        //genera un numero aleatorio entre 0  y n
                        int randomInt = randomGenerator.nextInt(n);
                        //escribe el numero aleatorio al archivo de texto
                        out.printf("%d\n", randomInt);
                    }
                } else {
                    for (int i = 0; i < n; i++) {
                        out.printf("%d\n", i);
                    }
                }
            }
            out.close();	// closes the output stream
        } catch (FileNotFoundException err) {
            // complains if file does not exist
            err.printStackTrace();
        }
        return;
    }

    private static void store(int n, int r, long tiempos[][]) // stores the file contents into an array and prints the array
    {
        String filename = "data.txt";
        File f = new File(filename);

        try {
            Scanner in = new Scanner(f);
            int[] list = new int[n];
            //crear matriz con el numero maximo de numeros distintos siendo la cantidad de numeros en el file
            int[][] matriz = new int[n][2];
            int count = 0;
            // reads numbers into array
            while (in.hasNextInt()) {
                list[count] = in.nextInt();
                ++count;
            }
            //llama subrutina que realiza los procesos
            repeticiones(list, matriz, tiempos, r);
            in.close();	// closes the input stream
        } catch (FileNotFoundException err) {
            // complains if file does not exist
            err.printStackTrace();
        }
        return;
    }

    //subrutina para guardar numeros en matriz y sumar las veces que esta repetido en el archivo
    public static void repeticiones(int array[], int matriz[][], long tiempos[][], int r) {
        //guarda el tiempo actual antes de llevar a cabo los procesos
        long sumt = 0;
        //recorrer todo el array
        for (int i = 0; i < array.length; i++) {
            //recorrer celdas de matriz
            int c = 0;
            for (int j = 0; j < matriz.length; j++) {
                c += 1;
                long startTime = System.nanoTime();
                //busca si la posicion es vacia
                if (matriz[j][1] == 0) {
                    //asigna el valor del arreglo a la casilla vacia
                    matriz[j][0] = array[i];
                    //aumenta el contador en 1
                    matriz[j][1] = 1;
                    //termina de buscar
                    j = matriz.length;
                } else {
                    c += 1;
                    //si encuentra el numero en la matriz
                    if (matriz[j][0] == array[i]) {
                        //aumenta el contador y termina de buscar
                        matriz[j][1] += 1;
                        j = matriz.length;
                    }
                }
                long finalTime = System.nanoTime() - startTime;
                sumt += finalTime;
            }
            tiempos[r][1] += c;
        }
        //suma al total de tiempos el tiempo de ejecucion de la repeticion
        sum += sumt;
        //guarda el tiempo de ejecucion de la repeticion en un arreglo
        tiempos[r][0] = sumt;
    }
}

/*
 * COMMENTS:
 *
 * Reading Data:
 * Reads integers until the scanner object finds something that it is not
 * an integer, such as a String or an End-Of-File EOF for instance.
 *
 * Static methods:
 * Static methods are not bound to any object of the class and these can
 * be conveniently invoked directly from the main program (as done here).
 *
 * Variables:
 * Note that local variables are destroyed (freed from memory) after the
 * method executes. Do not use global variables unless you really have to.
 *
 */
